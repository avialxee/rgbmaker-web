# -*- coding: utf-8 -*-

#from wtforms.fields.simple import TextAreaField
from scripts import forms,smv
#,helpers,tabledef
from flask import Flask, redirect, url_for, render_template, request, jsonify
#,session,flash,
#import json
#import sys
import os
from flask_restful import reqparse, abort, Api, Resource


app = Flask(__name__)
api = Api(app)
app.secret_key = os.urandom(12)  # Generic key for dev purposes only

# Heroku
#from flask_heroku import Heroku
#heroku = Heroku(app)

# ======== Routing =========================================================== #
# -------- Login ------------------------------------------------------------- #
@app.route('/', methods=['GET', 'POST'])
def login():
    return redirect(url_for('query'))
#def login():
#    if not session.get('logged_in'):
#        form = forms.LoginForm(request.form)
#        if request.method == 'POST':
#            username = request.form['username'].lower()
#            password = request.form['password']
#            if form.validate():
#                if helpers.credentials_valid(username, password):
#                    session['logged_in'] = True
#                    session['username'] = username
#                    return json.dumps({'status': 'Login successful'})
#                return json.dumps({'status': 'Invalid user/pass'})
#            return json.dumps({'status': 'Both fields required'})
#        return render_template('login.html', form=form)
#    user = helpers.get_user()
#    return render_template('home.html', user=user)
#
#
#app.route("/logout")
#ef logout():
#   session['logged_in'] = False
#   return redirect(url_for('login'))
#
#
# -------- Signup ---------------------------------------------------------- #
#app.route('/signup', methods=['GET', 'POST'])
#ef signup():
#   if not session.get('logged_in'):
#       form = forms.LoginForm(request.form)
#       if request.method == 'POST':
#           username = request.form['username'].lower()
#           password = helpers.hash_password(request.form['password'])
#           email = request.form['email']
#           if form.validate():
#               if not helpers.username_taken(username):
#                   helpers.add_user(username, password, email)
#                   session['logged_in'] = True
#                   session['username'] = username
#                   return json.dumps({'status': 'Signup successful'})
#               return json.dumps({'status': 'Username taken'})
#           return json.dumps({'status': 'User/Pass required'})
#       return render_template('login.html', form=form)
#   return redirect(url_for('login'))
#
#
# -------- Settings ---------------------------------------------------------- #
#app.route('/settings', methods=['GET', 'POST'])
#ef settings():
#   if session.get('logged_in'):
#       if request.method == 'POST':
#           password = request.form['password']
#           if password != "":
#               password = helpers.hash_password(password)
#           email = request.form['email']
#           helpers.change_user(password=password, email=email)
#           return json.dumps({'status': 'Saved'})
#       user = helpers.get_user()
#       return render_template('settings.html', user=user)
#   return redirect(url_for('login'))

# -------- Query ---------------------------------------------------------- #
@app.route('/query', methods=['GET'])
def query():
    
    #if session.get('logged_in'):
        qform = forms.QueryForm(request.form)
        
        
    
        return render_template('query.html', form=qform)
    #return redirect(url_for('login'))
#@app.route('/get-flashes')
#def get_flashes():
#    return render_template('_flashes.html')



##-----------==============         API for accessing RGBMaker       ========-----------##

@app.route('/home/<string:num>', methods = ['GET'])
def disp(num):
    info, uri, txt = smv.query(position=num)
    return jsonify({'info': info, 'message': txt, 'url':uri})

parse = reqparse.RequestParser()
parse.add_argument('position')
parse.add_argument('radius')
parse.add_argument('imagesopt')
parse.add_argument('archives')
parse.add_argument('name')



class RGBMaker(Resource):
    def post(self):
        arg= parse.parse_args()
        info, uri, txt = smv.query(name=arg['name'],position=arg['position'], radius=arg['radius'], imagesopt=arg['imagesopt'], archives=arg['archives'])
        return {'info': info, 'message': txt, 'url':uri}, 200

api.add_resource(RGBMaker, '/query')














# ======== Main ============================================================== #
if __name__ == "__main__":
    app.run(debug=False, use_reloader=True)
